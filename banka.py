import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np
from tkinter import font as tkfont
import webbrowser
from datetime import datetime

class ModernBankaHackAnalizTool:
    def __init__(self, root):
        self.root = root
        self.root.title("üîí Banka Hack Ekonomik Etki Analiz Aracƒ± v2.0")
        self.root.geometry("1280x900")
        self.root.configure(bg='#f8f9fa')
        
        # Modern renk ≈üemasƒ±
        self.colors = {
            'primary': '#2c3e50',
            'secondary': '#34495e',
            'accent': '#e74c3c',
            'light_accent': '#3498db',
            'success': '#2ecc71',
            'warning': '#f39c12',
            'background': '#f8f9fa',
            'text': '#2c3e50',
            'light_text': '#7f8c8d'
        }
        
        # Stil ayarlarƒ±
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # √ñzel stiller
        self.style.configure('.', background=self.colors['background'])
        self.style.configure('TFrame', background=self.colors['background'])
        self.style.configure('TLabel', background=self.colors['background'], 
                           font=('Segoe UI', 10), foreground=self.colors['text'])
        self.style.configure('TButton', font=('Segoe UI', 10, 'bold'), padding=8,
                           foreground='white', background=self.colors['primary'])
        self.style.configure('TLabelFrame', font=('Segoe UI', 11, 'bold'), 
                           background=self.colors['background'], 
                           foreground=self.colors['primary'], relief=tk.RAISED)
        self.style.configure('Header.TLabel', font=('Segoe UI', 14, 'bold'), 
                           foreground=self.colors['primary'])
        self.style.configure('Accent.TButton', foreground='white', 
                           background=self.colors['accent'])
        self.style.configure('Secondary.TButton', foreground='white', 
                           background=self.colors['light_accent'])
        self.style.configure('Link.TButton', foreground=self.colors['light_accent'], 
                           borderwidth=0, background=self.colors['background'])
        
        self.style.map('TButton', 
                      background=[('active', self.colors['secondary'])])
        self.style.map('Accent.TButton', 
                      background=[('active', '#c0392b')])
        self.style.map('Secondary.TButton', 
                      background=[('active', '#2980b9')])
        
        # Ba≈ülƒ±k
        self.create_header()
        
        # Ana i√ßerik
        self.create_main_content()
        
        # Footer
        self.create_footer()
        
        # Ba≈ülangƒ±√ßta √∂rnek veri y√ºkle
        self.load_sample_data()
        
    def create_header(self):
        header_frame = ttk.Frame(self.root, style='TFrame')
        header_frame.pack(fill=tk.X, padx=20, pady=(15, 10))
        
        # Logo ve ba≈ülƒ±k
        logo_frame = ttk.Frame(header_frame, style='TFrame')
        logo_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        self.logo_label = ttk.Label(logo_frame, 
                                  text="üîê", 
                                  font=('Segoe UI', 24),
                                  background=self.colors['background'])
        self.logo_label.pack(side=tk.LEFT, padx=(0, 10))
        
        title_frame = ttk.Frame(logo_frame, style='TFrame')
        title_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        title_label = ttk.Label(title_frame, 
                              text="BANKA HACK ANALƒ∞Z PLATFORMU", 
                              style='Header.TLabel')
        title_label.pack(anchor='w')
        
        subtitle_label = ttk.Label(title_frame, 
                                 text="Siber G√ºvenlik & Finansal Etki Deƒüerlendirme Aracƒ±",
                                 foreground=self.colors['light_text'])
        subtitle_label.pack(anchor='w')
        
        # Saƒü taraf - versiyon ve tarih
        info_frame = ttk.Frame(header_frame, style='TFrame')
        info_frame.pack(side=tk.RIGHT, fill=tk.Y)
        
        version_label = ttk.Label(info_frame, 
                                text=f"v2.0 | {datetime.now().strftime('%d.%m.%Y')}",
                                foreground=self.colors['light_text'])
        version_label.pack(anchor='e')
        
        status_label = ttk.Label(info_frame, 
                               text="‚úì √áevrimi√ßi | Veri G√ºvenliƒüi Aktif",
                               foreground=self.colors['success'])
        status_label.pack(anchor='e', pady=(5,0))
        
    def create_main_content(self):
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0,15))
        
        # Sol panel - Giri≈ü alanlarƒ±
        self.create_input_panel(main_frame)
        
        # Orta panel - Sonu√ßlar
        self.create_results_panel(main_frame)
        
        # Saƒü panel - Grafikler
        self.create_graph_panel(main_frame)
        
        # Grid ayarlarƒ±
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.columnconfigure(2, weight=2)
        main_frame.rowconfigure(0, weight=1)
    
    def create_input_panel(self, parent):
        input_frame = ttk.LabelFrame(parent, text="  HACK DETAYLARI  ", padding=(15, 12))
        input_frame.grid(row=0, column=0, padx=10, pady=5, sticky="nsew")
        
        # Giri≈ü alanlarƒ±
        entries = [
            ("Banka Adƒ±:", "banka_adi", "√ñrnek Banka A.≈û."),
            ("√áalƒ±nan Miktar ($):", "calinan_miktar", "50000000"),
            ("Sistem Onarƒ±m Maliyeti ($):", "onarim_maliyeti", "2000000"),
            ("Yasal Cezalar ($):", "yasal_cezalar", "5000000"),
            ("Hisse Deƒüer Kaybƒ± (%):", "hisse_kaybi", "15"),
            ("Piyasa Deƒüeri ($):", "piyasa_degeri", "1000000000"),
            ("Operasyonel Kesinti (saat):", "kesinti_suresi", "24"),
            ("Saatlik ƒ∞≈ülem Hacmi ($):", "saatlik_islem", "1000000")
        ]
        
        for i, (label_text, attr_name, default_value) in enumerate(entries):
            frame = ttk.Frame(input_frame, style='TFrame')
            frame.grid(row=i, column=0, sticky="ew", pady=4)
            
            label = ttk.Label(frame, text=label_text, width=25, anchor='w')
            label.pack(side=tk.LEFT, padx=(0, 10))
            
            entry = ttk.Entry(frame, font=('Segoe UI', 10))
            entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
            entry.insert(0, default_value)
            setattr(self, attr_name, entry)
        
        # Butonlar
        button_frame = ttk.Frame(input_frame, style='TFrame')
        button_frame.grid(row=len(entries)+1, column=0, sticky="ew", pady=(15,5))
        
        ttk.Button(button_frame, text="√ñrnek Veri Y√ºkle", 
                  command=self.load_sample_data, style='Secondary.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(button_frame, text="Hesapla", 
                  command=self.hesapla, style='Accent.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        # Risk g√∂stergesi
        risk_frame = ttk.LabelFrame(input_frame, text="  Rƒ∞SK DEƒûERLENDƒ∞RME  ", padding=(10, 5))
        risk_frame.grid(row=len(entries)+2, column=0, sticky="ew", pady=(20,5))
        
        self.risk_meter = ttk.Label(risk_frame, text="Hesaplama yapƒ±lmadƒ±", 
                                  background='white', anchor='center',
                                  font=('Segoe UI', 9), padding=(5,5))
        self.risk_meter.pack(fill=tk.X)
        
        # Ek bilgi
        info_label = ttk.Label(input_frame, 
                              text="T√ºm alanlarƒ± doldurduktan sonra 'Hesapla' butonuna basƒ±n.",
                              foreground=self.colors['light_text'], font=('Segoe UI', 9))
        info_label.grid(row=len(entries)+3, column=0, sticky="ew", pady=(10,0))
    
    def create_results_panel(self, parent):
        results_frame = ttk.LabelFrame(parent, text="  ANALƒ∞Z SONU√áLARI  ", padding=(15, 12))
        results_frame.grid(row=0, column=1, padx=10, pady=5, sticky="nsew")
        
        # Sonu√ß metni i√ßin scrollbar
        scroll_frame = ttk.Frame(results_frame)
        scroll_frame.pack(fill=tk.BOTH, expand=True)
        
        scrollbar = ttk.Scrollbar(scroll_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.sonuc_metni = tk.Text(scroll_frame, height=20, width=45, wrap=tk.WORD,
                                 font=('Segoe UI', 10), padx=12, pady=12,
                                 bg='white', fg=self.colors['text'], bd=0,
                                 yscrollcommand=scrollbar.set)
        self.sonuc_metni.pack(fill=tk.BOTH, expand=True)
        
        scrollbar.config(command=self.sonuc_metni.yview)
        
        # Butonlar
        button_frame = ttk.Frame(results_frame)
        button_frame.pack(fill=tk.X, pady=(10,0))
        
        ttk.Button(button_frame, text="Sonu√ßlarƒ± Kaydet", 
                  command=self.save_results, style='Secondary.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(button_frame, text="Rapor Olu≈ütur", 
                  command=self.generate_report, style='Secondary.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        # Hƒ±zlƒ± istatistikler
        stats_frame = ttk.LabelFrame(results_frame, text="  HIZLI ƒ∞STATƒ∞STƒ∞KLER  ", padding=(10, 8))
        stats_frame.pack(fill=tk.X, pady=(15,0))
        
        self.stats_labels = []
        for i in range(3):
            lbl = ttk.Label(stats_frame, text="---", 
                          font=('Segoe UI', 9), 
                          background='white', 
                          padding=(5,5),
                          anchor='center')
            lbl.pack(fill=tk.X, pady=2)
            self.stats_labels.append(lbl)
    
    def create_graph_panel(self, parent):
        graph_frame = ttk.LabelFrame(parent, text="  G√ñRSEL ANALƒ∞Z  ", padding=(15, 12))
        graph_frame.grid(row=0, column=2, padx=10, pady=5, sticky="nsew")
        
        # Notebook (sekme) yapƒ±sƒ±
        self.notebook = ttk.Notebook(graph_frame)
        self.notebook.pack(fill=tk.BOTH, expand=True)
        
        # Grafik 1 sekmesi
        tab1 = ttk.Frame(self.notebook)
        self.notebook.add(tab1, text="Kayƒ±p Daƒüƒ±lƒ±mƒ±")
        
        self.fig, self.ax = plt.subplots(figsize=(8, 5), facecolor=self.colors['background'])
        self.fig.subplots_adjust(left=0.1, right=0.9, top=0.9, bottom=0.1)
        self.canvas = FigureCanvasTkAgg(self.fig, master=tab1)
        self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Grafik 2 sekmesi
        tab2 = ttk.Frame(self.notebook)
        self.notebook.add(tab2, text="Detaylƒ± Analiz")
        
        self.fig2, self.ax2 = plt.subplots(figsize=(8, 4), facecolor=self.colors['background'])
        self.canvas2 = FigureCanvasTkAgg(self.fig2, master=tab2)
        self.canvas2.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Grafik 3 sekmesi (Zaman Serisi)
        tab3 = ttk.Frame(self.notebook)
        self.notebook.add(tab3, text="Zaman Etkisi")
        
        self.fig3, self.ax3 = plt.subplots(figsize=(8, 3), facecolor=self.colors['background'])
        self.canvas3 = FigureCanvasTkAgg(self.fig3, master=tab3)
        self.canvas3.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Grafik ayarlarƒ±
        plt.style.use('seaborn-v0_8')  # D√ºzeltildi
    
    def create_footer(self):
        footer_frame = ttk.Frame(self.root, style='TFrame')
        footer_frame.pack(fill=tk.X, padx=20, pady=(0,15))
        
        # Sosyal medya butonlarƒ±
        social_frame = ttk.Frame(footer_frame, style='TFrame')
        social_frame.pack(side=tk.LEFT)
        
        social_links = [
            ("üåê", "https://www.example.com"),
            ("üìò", "https://www.facebook.com"),
            ("üê¶", "https://www.twitter.com"),
            ("üì∑", "https://www.instagram.com"),
            ("üíº", "https://www.linkedin.com")
        ]
        
        for icon, url in social_links:
            btn = ttk.Button(social_frame, text=icon, style='Link.TButton',
                           command=lambda u=url: webbrowser.open(u))
            btn.pack(side=tk.LEFT, padx=3)
        
        # Copyright ve diƒüer bilgiler
        info_frame = ttk.Frame(footer_frame, style='TFrame')
        info_frame.pack(side=tk.RIGHT)
        
        ttk.Label(info_frame, 
                 text="¬© 2025 Siber G√ºvenlik ve Finansal Analiz Ekibi | T√ºm haklarƒ± saklƒ±dƒ±r",
                 foreground=self.colors['light_text']).pack(side=tk.RIGHT)
        
        # Yardƒ±m butonlarƒ±
        help_frame = ttk.Frame(footer_frame, style='TFrame')
        help_frame.pack(side=tk.RIGHT, padx=20)
        
        ttk.Button(help_frame, text="Yardƒ±m", 
                  command=self.open_help, style='Link.TButton').pack(side=tk.LEFT, padx=5)
        ttk.Button(help_frame, text="Hakkƒ±nda", 
                  command=self.about, style='Link.TButton').pack(side=tk.LEFT, padx=5)
    
    def load_sample_data(self):
        """√ñrnek veri y√ºkleme fonksiyonu"""
        entries = [
            ("banka_adi", "√ñrnek Banka A.≈û."),
            ("calinan_miktar", "50000000"),
            ("onarim_maliyeti", "2000000"),
            ("yasal_cezalar", "5000000"),
            ("hisse_kaybi", "15"),
            ("piyasa_degeri", "1000000000"),
            ("kesinti_suresi", "24"),
            ("saatlik_islem", "1000000")
        ]
        
        for attr_name, value in entries:
            entry = getattr(self, attr_name)
            entry.delete(0, tk.END)
            entry.insert(0, value)
        
        self.risk_meter.config(text="√ñrnek veriler y√ºklendi. Hesaplamak i√ßin 'Hesapla' butonuna basƒ±n.",
                             background=self.colors['warning'], foreground='white')
    
    def hesapla(self):
        try:
            # Verileri al
            banka_adi = self.banka_adi.get()
            calinan = float(self.calinan_miktar.get())
            onarim = float(self.onarim_maliyeti.get())
            ceza = float(self.yasal_cezalar.get())
            hisse_kayip = float(self.hisse_kaybi.get()) / 100
            piyasa_deger = float(self.piyasa_degeri.get())
            kesinti = float(self.kesinti_suresi.get())
            saatlik_islem = float(self.saatlik_islem.get())
            
            # Hesaplamalar
            toplam_dogrudan_kayip = calinan + onarim + ceza
            marka_degeri_kaybi = hisse_kayip * piyasa_deger
            operasyonel_kayip = kesinti * saatlik_islem
            toplam_kayip = toplam_dogrudan_kayip + marka_degeri_kaybi + operasyonel_kayip
            
            # GSYƒ∞H kar≈üƒ±la≈ütƒ±rmasƒ± (T√ºrkiye i√ßin yakla≈üƒ±k 850 milyar $)
            gsyih_oran = (toplam_kayip/850000000000)*100
            
            # Risk seviyesini belirle
            risk_seviyesi = "D√ú≈û√úK"
            risk_rengi = self.colors['success']
            if toplam_kayip > 100000000:
                risk_seviyesi = "Y√úKSEK"
                risk_rengi = self.colors['accent']
            elif toplam_kayip > 50000000:
                risk_seviyesi = "ORTA"
                risk_rengi = self.colors['warning']
            
            # Sonu√ßlarƒ± g√∂ster
            sonuc_text = f"üè¶ Banka: {banka_adi}\n"
            sonuc_text += "="*50 + "\n"
            sonuc_text += "üîç Kapsamlƒ± Analiz Sonu√ßlarƒ±:\n\n"
            
            sonuc_text += "üí∏ Doƒürudan Kayƒ±plar:\n"
            sonuc_text += f"  ‚Ä¢ √áalƒ±nan Miktar: ${calinan:,.2f}\n"
            sonuc_text += f"  ‚Ä¢ Sistem Onarƒ±mƒ±: ${onarim:,.2f}\n"
            sonuc_text += f"  ‚Ä¢ Yasal Cezalar: ${ceza:,.2f}\n"
            sonuc_text += f"  ‚Üí Toplam Doƒürudan Kayƒ±p: ${toplam_dogrudan_kayip:,.2f}\n\n"
            
            sonuc_text += "üìâ Dolaylƒ± Kayƒ±plar:\n"
            sonuc_text += f"  ‚Ä¢ Hisse Deƒüeri Kaybƒ± (%{hisse_kayip*100:.1f}): ${marka_degeri_kaybi:,.2f}\n"
            sonuc_text += f"  ‚Ä¢ Operasyonel Kesinti Kaybƒ±: ${operasyonel_kayip:,.2f}\n\n"
            
            sonuc_text += "üî• Genel Toplam Kayƒ±p:\n"
            sonuc_text += f"  ${toplam_kayip:,.2f}\n\n"
            
            sonuc_text += "üåç Makro Ekonomik Etki:\n"
            sonuc_text += f"  ‚Ä¢ T√ºrkiye GSYƒ∞H'sƒ±na oranƒ±: %{gsyih_oran:.6f}\n"
            sonuc_text += f"  ‚Ä¢ Risk Seviyesi: {risk_seviyesi}\n"
            sonuc_text += "="*50 + "\n"
            sonuc_text += "‚ö†Ô∏è Uyarƒ±: Bu sonu√ßlar tahmini deƒüerlerdir. Detaylƒ± analiz i√ßin uzman g√∂r√º≈ü√º alƒ±nƒ±z."
            
            self.sonuc_metni.config(state=tk.NORMAL)
            self.sonuc_metni.delete(1.0, tk.END)
            self.sonuc_metni.insert(tk.END, sonuc_text)
            self.sonuc_metni.config(state=tk.DISABLED)
            
            # Hƒ±zlƒ± istatistikleri g√ºncelle
            self.stats_labels[0].config(text=f"Toplam Kayƒ±p: ${toplam_kayip/1000000:,.1f} Milyon")
            self.stats_labels[1].config(text=f"Risk Seviyesi: {risk_seviyesi}")
            self.stats_labels[2].config(text=f"GSYƒ∞H Etkisi: %{gsyih_oran:.4f}")
            
            # Risk g√∂stergesini g√ºncelle
            self.risk_meter.config(text=f"Rƒ∞SK SEVƒ∞YESƒ∞: {risk_seviyesi} | Toplam Kayƒ±p: ${toplam_kayip/1000000:,.1f}M",
                                 background=risk_rengi, foreground='white',
                                 font=('Segoe UI', 10, 'bold'))
            
            # Grafik olu≈ütur
            self.create_charts(toplam_dogrudan_kayip, marka_degeri_kaybi, operasyonel_kayip)
            
        except ValueError:
            messagebox.showerror("Hata", "L√ºtfen t√ºm alanlarƒ± doƒüru ≈üekilde doldurun!")
            self.risk_meter.config(text="Ge√ßersiz veri giri≈üi! L√ºtfen kontrol edin.",
                                 background=self.colors['accent'], foreground='white')
    
    def create_charts(self, dogrudan, marka, operasyonel):
        """Grafikleri olu≈üturur"""
        # Ana grafik - Pasta grafiƒüi
        self.ax.clear()
        
        labels = ['Doƒürudan Kayƒ±plar', 'Marka Deƒüeri Kaybƒ±', 'Operasyonel Kayƒ±p']
        sizes = [dogrudan, marka, operasyonel]
        colors = [self.colors['accent'], self.colors['warning'], self.colors['light_accent']]
        explode = (0.05, 0, 0)
        
        wedges, texts, autotexts = self.ax.pie(
            sizes, explode=explode, labels=labels, colors=colors,
            autopct='%1.1f%%', shadow=True, startangle=90,
            textprops={'fontsize': 9}, wedgeprops={'edgecolor': 'white', 'linewidth': 1}
        )
        
        # Y√ºzde deƒüerlerini daha okunaklƒ± yap
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        self.ax.set_title('Kayƒ±p Daƒüƒ±lƒ±mƒ±', fontsize=12, pad=20, color=self.colors['primary'])
        
        # ƒ∞kincil grafik - √áubuk grafik
        self.ax2.clear()
        
        categories = ['√áalƒ±nan Para', 'Onarƒ±m', 'Cezalar', 'Hisse Kaybƒ±', 'Operasyonel']
        values = [dogrudan/3, dogrudan/3, dogrudan/3, marka, operasyonel]  # D√ºzeltildi: dogruan -> dogrudan
        
        bars = self.ax2.bar(categories, values, color=[
            self.colors['accent'], '#e67e22', '#d35400', 
            self.colors['warning'], self.colors['light_accent']
        ], edgecolor='white')
        
        self.ax2.set_title('Kayƒ±p Kategorileri ($)', fontsize=12, pad=15, color=self.colors['primary'])
        self.ax2.tick_params(axis='x', rotation=45, labelsize=8)
        self.ax2.grid(axis='y', linestyle='--', alpha=0.7)
        
        # √áubuklarƒ±n √ºzerine deƒüerleri yaz
        for bar in bars:
            height = bar.get_height()
            self.ax2.text(bar.get_x() + bar.get_width()/2., height,
                        f'${height/1000000:,.1f}M',
                        ha='center', va='bottom', fontsize=8, color=self.colors['primary'])
        
        # √ú√ß√ºnc√º grafik - Zaman serisi sim√ºlasyonu
        self.ax3.clear()
        
        months = ['Olay', '1 Ay', '3 Ay', '6 Ay', '1 Yƒ±l']
        recovery = [100, 85, 70, 50, 30]  # ƒ∞yile≈üme y√ºzdesi
        
        self.ax3.plot(months, recovery, marker='o', color=self.colors['accent'],
                     linewidth=2, markersize=8, markerfacecolor='white',
                     markeredgewidth=2, markeredgecolor=self.colors['accent'])
        
        self.ax3.fill_between(months, recovery, color=self.colors['accent'], alpha=0.1)
        self.ax3.set_title('Zamana G√∂re ƒ∞yile≈üme Projeksiyonu', fontsize=12, 
                         pad=15, color=self.colors['primary'])
        self.ax3.set_ylabel('Etki (%)', color=self.colors['primary'])
        self.ax3.grid(True, linestyle='--', alpha=0.5)
        
        # Grafikleri √ßiz
        self.canvas.draw()
        self.canvas2.draw()
        self.canvas3.draw()
    
    def save_results(self):
        """Sonu√ßlarƒ± dosyaya kaydeder"""
        try:
            filename = f"banka_hack_analiz_raporu_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, "w", encoding="utf-8") as f:
                f.write(self.sonuc_metni.get(1.0, tk.END))
            messagebox.showinfo("Ba≈üarƒ±lƒ±", f"Sonu√ßlar '{filename}' dosyasƒ±na kaydedildi!")
        except Exception as e:
            messagebox.showerror("Hata", f"Dosya kaydedilirken bir hata olu≈ütu:\n{str(e)}")
    
    def generate_report(self):
        """Rapor olu≈üturma fonksiyonu"""
        # Daha geli≈ümi≈ü bir rapor penceresi
        report_window = tk.Toplevel(self.root)
        report_window.title("Rapor Olu≈ütur")
        report_window.geometry("600x400")
        report_window.resizable(False, False)
        
        ttk.Label(report_window, 
                 text="Rapor Olu≈üturma Se√ßenekleri",
                 font=('Segoe UI', 12, 'bold')).pack(pady=10)
        
        # Rapor se√ßenekleri
        options_frame = ttk.Frame(report_window)
        options_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        ttk.Label(options_frame, text="Rapor Formatƒ±:").grid(row=0, column=0, sticky="w", pady=5)
        report_format = ttk.Combobox(options_frame, values=["PDF", "HTML", "Word", "Excel"])
        report_format.set("PDF")
        report_format.grid(row=0, column=1, sticky="ew", pady=5)
        
        ttk.Label(options_frame, text="Rapor Detay Seviyesi:").grid(row=1, column=0, sticky="w", pady=5)
        detail_level = ttk.Combobox(options_frame, values=["√ñzet", "Standart", "Detaylƒ±"])
        detail_level.set("Standart")
        detail_level.grid(row=1, column=1, sticky="ew", pady=5)
        
        ttk.Label(options_frame, text="E-posta G√∂nder:").grid(row=2, column=0, sticky="w", pady=5)
        email_entry = ttk.Entry(options_frame)
        email_entry.grid(row=2, column=1, sticky="ew", pady=5)
        
        # Butonlar
        button_frame = ttk.Frame(report_window)
        button_frame.pack(fill=tk.X, padx=20, pady=10)
        
        ttk.Button(button_frame, text="ƒ∞ptal", 
                  command=report_window.destroy).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="Olu≈ütur", 
                  command=lambda: self.create_actual_report(report_window, report_format.get(), detail_level.get(), email_entry.get()),
                  style='Accent.TButton').pack(side=tk.RIGHT, padx=5)
    
    def create_actual_report(self, window, format, detail, email):
        """Rapor olu≈üturma sim√ºlasyonu"""
        window.destroy()
        messagebox.showinfo("Ba≈üarƒ±lƒ±", 
                          f"{detail} seviyesinde {format} raporu olu≈üturuldu!" + 
                          (f"\nRapor {email} adresine g√∂nderildi." if email else ""))
    
    def open_help(self):
        """Yardƒ±m sayfasƒ±nƒ± a√ßar"""
        webbrowser.open("https://www.example.com/banka-hack-analiz-yardim")
    
    def about(self):
        """Hakkƒ±nda penceresi"""
        about_window = tk.Toplevel(self.root)
        about_window.title("Hakkƒ±nda")
        about_window.geometry("500x400")
        about_window.resizable(False, False)
        
        # Ba≈ülƒ±k
        ttk.Label(about_window, 
                 text="Finanshield Analyzer",
                 font=('Segoe UI', 14, 'bold')).pack(pady=15)
        
        # Logo
        logo_label = ttk.Label(about_window, 
                             text="üîê",
                             font=('Segoe UI', 48),
                             foreground=self.colors['primary'])
        logo_label.pack(pady=5)
        
        # A√ßƒ±klama
        desc_frame = ttk.Frame(about_window)
        desc_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=10)
        
        ttk.Label(desc_frame, 
                 text="Bu ara√ß, banka hack olaylarƒ±nƒ±n ekonomik etkisini analiz etmek i√ßin geli≈ütirilmi≈ütir.",
                 wraplength=400, justify='center').pack(pady=5)
        
        ttk.Label(desc_frame, 
                 text="√ñzellikler:",
                 font=('Segoe UI', 10, 'bold')).pack(pady=(15,5), anchor='w')
        
        features = [
            "‚úì Finansal kayƒ±p hesaplama",
            "‚úì Marka deƒüeri etki analizi",
            "‚úì Operasyonel kesinti maliyeti",
            "‚úì Makro ekonomik etki deƒüerlendirmesi",
            "‚úì G√∂rsel analiz ara√ßlarƒ±"
        ]
        
        for feature in features:
            ttk.Label(desc_frame, 
                     text=feature,
                     foreground=self.colors['primary']).pack(anchor='w', padx=20)
        
        # Kapatma butonu
        ttk.Button(about_window, 
                  text="Kapat", 
                  command=about_window.destroy,
                  style='Accent.TButton').pack(pady=15)

# Uygulamayƒ± ba≈ülat
if __name__ == "__main__":
    root = tk.Tk()
    
    # Windows'ta daha iyi g√∂r√ºn√ºm i√ßin
    try:
        from ctypes import windll
        windll.shcore.SetProcessDpiAwareness(1)
    except:
        pass
    
    app = ModernBankaHackAnalizTool(root)
    root.mainloop()