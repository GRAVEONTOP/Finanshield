import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from mpl_toolkits.mplot3d import Axes3D
import numpy as np
import pandas as pd
from datetime import datetime
import webbrowser
import json
import requests
import pickle
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from PIL import Image, ImageTk
import io
import folium
from folium.plugins import HeatMap
import plotly.graph_objects as go
import threading
import time
import random
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

class UltimateBankaHackAnalizTool:
    def __init__(self, root):
        self.root = root
        self.root.title("üöÄ Ultimate Banka Hack Analiz Platformu v3.0")
        self.root.geometry("1440x950")
        self.root.state('zoomed')
        
        # AI Modeli Y√ºkle
        self.ai_model = self.load_ai_model()
        self.historical_data = self.load_historical_data()
        
        # Modern renk ≈üemasƒ±
        self.colors = {
            'primary': '#2c3e50',
            'secondary': '#34495e',
            'accent': '#e74c3c',
            'light_accent': '#3498db',
            'success': '#27ae60',
            'warning': '#f39c12',
            'background': '#f5f7fa',
            'text': '#2c3e50',
            'light_text': '#7f8c8d',
            'dark': '#1a1a1a',
            'neon': '#00ff9d'
        }
        
        # Stil ayarlarƒ±
        self.setup_styles()
        
        # Aray√ºz olu≈ütur
        self.create_interface()
        
        # Ba≈ülangƒ±√ßta √∂rnek veri y√ºkle
        self.load_sample_data()
        
        # Ger√ßek zamanlƒ± veri g√ºncelleme
        self.setup_realtime_updates()
    
    def setup_styles(self):
        """Modern ve profesyonel stil ayarlarƒ±"""
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # √ñzel stiller
        self.style.configure('.', background=self.colors['background'])
        self.style.configure('TFrame', background=self.colors['background'])
        self.style.configure('TLabel', background=self.colors['background'], 
                           font=('Segoe UI', 10), foreground=self.colors['text'])
        self.style.configure('TButton', font=('Segoe UI', 10, 'bold'), padding=8,
                           foreground='white', background=self.colors['primary'])
        self.style.configure('TLabelFrame', font=('Segoe UI', 11, 'bold'), 
                           background=self.colors['background'], 
                           foreground=self.colors['primary'], relief=tk.RAISED)
        self.style.configure('Header.TLabel', font=('Segoe UI', 16, 'bold'), 
                           foreground=self.colors['primary'])
        self.style.configure('Accent.TButton', foreground='white', 
                           background=self.colors['accent'])
        self.style.configure('Secondary.TButton', foreground='white', 
                           background=self.colors['light_accent'])
        self.style.configure('Neon.TButton', foreground='black', 
                           background=self.colors['neon'], font=('Segoe UI', 10, 'bold'))
        
        self.style.map('TButton', 
                      background=[('active', self.colors['secondary'])])
        self.style.map('Accent.TButton', 
                      background=[('active', '#c0392b')])
        self.style.map('Secondary.TButton', 
                      background=[('active', '#2980b9')])
        self.style.map('Neon.TButton',
                     background=[('active', '#00cc7f')])
    
    def create_interface(self):
        """T√ºm aray√ºz bile≈üenlerini olu≈ütur"""
        # Ba≈ülƒ±k
        self.create_header()
        
        # Ana i√ßerik
        self.create_main_content()
        
        # Footer
        self.create_footer()
        
        # Yapay Zeka Paneli
        self.create_ai_panel()
        
        # Blockchain ƒ∞zleyici
        self.create_blockchain_panel()
        
        # 3D G√∂rselle≈ütirme
        self.setup_3d_visualization()
    
    def create_header(self):
        """√úst bilgi alanƒ±nƒ± olu≈ütur"""
        header_frame = ttk.Frame(self.root, style='TFrame')
        header_frame.pack(fill=tk.X, padx=20, pady=(10, 5))
        
        # Logo ve ba≈ülƒ±k
        logo_frame = ttk.Frame(header_frame, style='TFrame')
        logo_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        # Animasyonlu logo
        self.logo_images = [ImageTk.PhotoImage(Image.open(f'logo_{i}.png').resize((40,40))) 
                          for i in range(1,4)] if False else None
        self.logo_label = ttk.Label(logo_frame, text="üîê", font=('Segoe UI', 24))
        self.logo_label.pack(side=tk.LEFT, padx=(0, 10))
        
        title_frame = ttk.Frame(logo_frame, style='TFrame')
        title_frame.pack(side=tk.LEFT, fill=tk.Y)
        
        title_label = ttk.Label(title_frame, 
                              text="ULTIMATE BANKA HACK ANALƒ∞Z PLATFORMU", 
                              style='Header.TLabel')
        title_label.pack(anchor='w')
        
        subtitle_label = ttk.Label(title_frame, 
                                 text="Yapay Zeka Destekli Siber G√ºvenlik & Finansal Etki Deƒüerlendirme Sistemi",
                                 foreground=self.colors['light_text'])
        subtitle_label.pack(anchor='w')
        
        # Saƒü taraf - sistem bilgileri
        info_frame = ttk.Frame(header_frame, style='TFrame')
        info_frame.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.cpu_usage = ttk.Label(info_frame, 
                                 text="CPU: %0.0f | RAM: %0.0f%%" % (random.random()*10, random.random()*30),
                                 foreground=self.colors['light_text'])
        self.cpu_usage.pack(anchor='e')
        
        version_label = ttk.Label(info_frame, 
                                text=f"v3.0 | {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                                foreground=self.colors['light_text'])
        version_label.pack(anchor='e', pady=(5,0))
        
        self.status_label = ttk.Label(info_frame, 
                                    text="‚úì √áevrimi√ßi | AI Aktif | Veri G√ºvenliƒüi: %100",
                                    foreground=self.colors['success'])
        self.status_label.pack(anchor='e')
    
    def create_main_content(self):
        """Ana i√ßerik alanƒ±nƒ± olu≈ütur"""
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=(0,15))
        
        # Sol panel - Giri≈ü alanlarƒ±
        self.create_input_panel(main_frame)
        
        # Orta panel - Sonu√ßlar ve AI analizi
        self.create_results_panel(main_frame)
        
        # Saƒü panel - Grafikler ve g√∂rselle≈ütirme
        self.create_visualization_panel(main_frame)
        
        # Grid ayarlarƒ±
        main_frame.columnconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.columnconfigure(2, weight=2)
        main_frame.rowconfigure(0, weight=1)
    
    def create_input_panel(self, parent):
        """Veri giri≈ü panelini olu≈ütur"""
        input_frame = ttk.LabelFrame(parent, text="  HACK DETAYLARI  ", padding=(15, 12))
        input_frame.grid(row=0, column=0, padx=10, pady=5, sticky="nsew")
        
        # Giri≈ü alanlarƒ±
        entries = [
            ("Banka Adƒ±:", "banka_adi", "√ñrnek Banka A.≈û."),
            ("√áalƒ±nan Miktar ($):", "calinan_miktar", "50000000"),
            ("Sistem Onarƒ±m Maliyeti ($):", "onarim_maliyeti", "2000000"),
            ("Yasal Cezalar ($):", "yasal_cezalar", "5000000"),
            ("Hisse Deƒüer Kaybƒ± (%):", "hisse_kaybi", "15"),
            ("Piyasa Deƒüeri ($):", "piyasa_degeri", "1000000000"),
            ("Operasyonel Kesinti (saat):", "kesinti_suresi", "24"),
            ("Saatlik ƒ∞≈ülem Hacmi ($):", "saatlik_islem", "1000000"),
            ("M√º≈üteri Sayƒ±sƒ±:", "musteri_sayisi", "5000000"),
            ("Etkilenen √úlke Sayƒ±sƒ±:", "ulke_sayisi", "3")
        ]
        
        for i, (label_text, attr_name, default_value) in enumerate(entries):
            frame = ttk.Frame(input_frame, style='TFrame')
            frame.grid(row=i, column=0, sticky="ew", pady=3)
            
            label = ttk.Label(frame, text=label_text, width=22, anchor='w')
            label.pack(side=tk.LEFT, padx=(0, 10))
            
            entry = ttk.Entry(frame, font=('Segoe UI', 10))
            entry.pack(side=tk.LEFT, fill=tk.X, expand=True)
            entry.insert(0, default_value)
            setattr(self, attr_name, entry)
        
        # Butonlar
        button_frame = ttk.Frame(input_frame, style='TFrame')
        button_frame.grid(row=len(entries)+1, column=0, sticky="ew", pady=(15,5))
        
        ttk.Button(button_frame, text="√ñrnek Veri Y√ºkle", 
                  command=self.load_sample_data, style='Secondary.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(button_frame, text="Hesapla", 
                  command=self.advanced_hesapla, style='Accent.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        # Risk g√∂stergesi
        self.create_risk_indicator(input_frame, len(entries)+2)
        
        # Senaryo y√∂neticisi
        self.create_scenario_manager(input_frame, len(entries)+4)
    
    def create_risk_indicator(self, parent, row):
        """Geli≈ümi≈ü risk g√∂stergesi olu≈ütur"""
        risk_frame = ttk.LabelFrame(parent, text="  Rƒ∞SK DEƒûERLENDƒ∞RME  ", padding=(10, 5))
        risk_frame.grid(row=row, column=0, sticky="ew", pady=(15,5))
        
        # Risk seviyesi g√∂stergesi
        self.risk_level = tk.StringVar(value="0")
        self.risk_meter = ttk.Progressbar(risk_frame, orient='horizontal', 
                                         length=200, mode='determinate',
                                         variable=self.risk_level)
        self.risk_meter.pack(fill=tk.X, pady=5)
        
        # Risk etiketleri
        risk_label_frame = ttk.Frame(risk_frame)
        risk_label_frame.pack(fill=tk.X)
        
        ttk.Label(risk_label_frame, text="D√º≈ü√ºk", foreground=self.colors['success']).pack(side=tk.LEFT)
        ttk.Label(risk_label_frame, text="Orta", foreground=self.colors['warning']).pack(side=tk.LEFT, padx=50)
        ttk.Label(risk_label_frame, text="Y√ºksek", foreground=self.colors['accent']).pack(side=tk.RIGHT)
        
        # AI √∂nerisi
        self.ai_recommendation = ttk.Label(risk_frame, text="AI √∂nerisi bekleniyor...",
                                         wraplength=250, justify='center',
                                         foreground=self.colors['light_text'])
        self.ai_recommendation.pack(fill=tk.X, pady=(5,0))
    
    def create_scenario_manager(self, parent, row):
        """Senaryo y√∂neticisi olu≈ütur"""
        scenario_frame = ttk.LabelFrame(parent, text="  SENARYO Y√ñNETƒ∞Cƒ∞Sƒ∞  ", padding=(10, 8))
        scenario_frame.grid(row=row, column=0, sticky="ew", pady=(15,5))
        
        # Senaryo se√ßimi
        scenario_options = ["Standart Hack", "ƒ∞√ßeriden Sabotaj", "Devlet Destekli", "Siber Sava≈ü", "√ñzel Senaryo"]
        self.scenario_var = tk.StringVar(value=scenario_options[0])
        
        for i, option in enumerate(scenario_options):
            rb = ttk.Radiobutton(scenario_frame, text=option, value=option,
                                variable=self.scenario_var, command=self.update_scenario)
            rb.pack(anchor='w', pady=2)
        
        # √ñzel senaryo butonu
        ttk.Button(scenario_frame, text="√ñzel Senaryo Olu≈ütur", 
                  command=self.create_custom_scenario, style='Secondary.TButton').pack(fill=tk.X, pady=(5,0))
    
    def create_results_panel(self, parent):
        """Sonu√ßlar panelini olu≈ütur"""
        results_frame = ttk.LabelFrame(parent, text="  ANALƒ∞Z SONU√áLARI & AI √ñNERƒ∞LERƒ∞  ", padding=(15, 12))
        results_frame.grid(row=0, column=1, padx=10, pady=5, sticky="nsew")
        
        # Notebook yapƒ±sƒ±
        self.results_notebook = ttk.Notebook(results_frame)
        self.results_notebook.pack(fill=tk.BOTH, expand=True)
        
        # Sonu√ßlar sekmesi
        self.create_results_tab()
        
        # AI Analiz sekmesi
        self.create_ai_analysis_tab()
        
        # Blockchain ƒ∞zleme sekmesi
        self.create_blockchain_tab()
    
    def create_results_tab(self):
        """Sonu√ßlar sekmesini olu≈ütur"""
        tab1 = ttk.Frame(self.results_notebook)
        self.results_notebook.add(tab1, text="Sonu√ßlar")
        
        # Sonu√ß metni i√ßin scrollbar
        scroll_frame = ttk.Frame(tab1)
        scroll_frame.pack(fill=tk.BOTH, expand=True)
        
        scrollbar = ttk.Scrollbar(scroll_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.sonuc_metni = tk.Text(scroll_frame, height=20, width=45, wrap=tk.WORD,
                                 font=('Segoe UI', 10), padx=12, pady=12,
                                 bg='white', fg=self.colors['text'], bd=0,
                                 yscrollcommand=scrollbar.set)
        self.sonuc_metni.pack(fill=tk.BOTH, expand=True)
        
        scrollbar.config(command=self.sonuc_metni.yview)
        
        # Butonlar
        button_frame = ttk.Frame(tab1)
        button_frame.pack(fill=tk.X, pady=(10,0))
        
        ttk.Button(button_frame, text="Sonu√ßlarƒ± Kaydet", 
                  command=self.save_results, style='Secondary.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(button_frame, text="Rapor Olu≈ütur", 
                  command=self.generate_advanced_report, style='Secondary.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
    
    def create_ai_analysis_tab(self):
        """AI analiz sekmesini olu≈ütur"""
        tab2 = ttk.Frame(self.results_notebook)
        self.results_notebook.add(tab2, text="AI Analiz")
        
        # AI sonu√ßlarƒ±
        self.ai_result_text = tk.Text(tab2, height=10, wrap=tk.WORD,
                                    font=('Segoe UI', 10), padx=12, pady=12,
                                    bg='white', fg=self.colors['text'])
        self.ai_result_text.pack(fill=tk.BOTH, expand=True)
        self.ai_result_text.insert(tk.END, "Yapay Zeka analiz sonu√ßlarƒ± burada g√∂r√ºnt√ºlenecek...\n\n")
        self.ai_result_text.config(state=tk.DISABLED)
        
        # AI √∂nerileri
        recommendation_frame = ttk.LabelFrame(tab2, text=" AI √ñNERƒ∞LERƒ∞ ", padding=(10, 8))
        recommendation_frame.pack(fill=tk.X, pady=(10,0))
        
        self.ai_recommendations = tk.Listbox(recommendation_frame, height=4,
                                          font=('Segoe UI', 9), bg='white',
                                          selectbackground=self.colors['light_accent'])
        self.ai_recommendations.pack(fill=tk.X)
        
        # AI butonlarƒ±
        ai_button_frame = ttk.Frame(tab2)
        ai_button_frame.pack(fill=tk.X, pady=(10,0))
        
        ttk.Button(ai_button_frame, text="Detaylƒ± Analiz Yap", 
                  command=self.run_detailed_ai_analysis, style='Neon.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(ai_button_frame, text="Gelecek Tahmini", 
                  command=self.run_future_prediction, style='Secondary.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
    
    def create_blockchain_tab(self):
        """Blockchain izleme sekmesini olu≈ütur"""
        tab3 = ttk.Frame(self.results_notebook)
        self.results_notebook.add(tab3, text="Blockchain ƒ∞zleme")
        
        # Blockchain giri≈ü alanƒ±
        entry_frame = ttk.Frame(tab3)
        entry_frame.pack(fill=tk.X, pady=(0,10))
        
        ttk.Label(entry_frame, text="ƒ∞≈ülem Hash:").pack(side=tk.LEFT)
        self.blockchain_entry = ttk.Entry(entry_frame)
        self.blockchain_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        ttk.Button(entry_frame, text="Takip Et", 
                  command=self.track_blockchain, style='Secondary.TButton').pack(side=tk.LEFT)
        
        # Blockchain sonu√ßlarƒ±
        self.blockchain_text = tk.Text(tab3, height=12, wrap=tk.WORD,
                                     font=('Courier New', 9), padx=12, pady=12,
                                     bg='black', fg='white')
        self.blockchain_text.pack(fill=tk.BOTH, expand=True)
        
        # Blockchain butonlarƒ±
        bc_button_frame = ttk.Frame(tab3)
        bc_button_frame.pack(fill=tk.X, pady=(10,0))
        
        ttk.Button(bc_button_frame, text="Para Akƒ±≈üƒ±nƒ± G√∂rselle≈ütir", 
                  command=self.visualize_money_flow, style='Neon.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        ttk.Button(bc_button_frame, text="Sonu√ßlarƒ± Kaydet", 
                  command=self.save_blockchain_data, style='Secondary.TButton').pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
    
    def create_visualization_panel(self, parent):
        """G√∂rselle≈ütirme panelini olu≈ütur"""
        vis_frame = ttk.LabelFrame(parent, text="  GELƒ∞≈ûMƒ∞≈û G√ñRSELLE≈ûTƒ∞RME  ", padding=(15, 12))
        vis_frame.grid(row=0, column=2, padx=10, pady=5, sticky="nsew")
        
        # Notebook (sekme) yapƒ±sƒ±
        self.vis_notebook = ttk.Notebook(vis_frame)
        self.vis_notebook.pack(fill=tk.BOTH, expand=True)
        
        # Grafik 1 sekmesi - 3D Kayƒ±p Daƒüƒ±lƒ±mƒ±
        self.create_3d_loss_tab()
        
        # Grafik 2 sekmesi - Coƒürafi Etki
        self.create_geo_impact_tab()
        
        # Grafik 3 sekmesi - Zaman Serisi
        self.create_time_series_tab()
        
        # Grafik 4 sekmesi - Makro Ekonomik Etki
        self.create_macro_impact_tab()
    
    def create_3d_loss_tab(self):
        """3D Kayƒ±p Daƒüƒ±lƒ±mƒ± sekmesini olu≈ütur"""
        tab1 = ttk.Frame(self.vis_notebook)
        self.vis_notebook.add(tab1, text="3D Kayƒ±p Daƒüƒ±lƒ±mƒ±")
        
        # 3D Grafik
        self.fig_3d = plt.figure(figsize=(8, 6), facecolor=self.colors['background'])
        self.ax_3d = self.fig_3d.add_subplot(111, projection='3d')
        
        self.canvas_3d = FigureCanvasTkAgg(self.fig_3d, master=tab1)
        self.canvas_3d.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        
        # Toolbar ekle
        toolbar = NavigationToolbar2Tk(self.canvas_3d, tab1)
        toolbar.update()
        self.canvas_3d._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=True)
    
    def create_geo_impact_tab(self):
        """Coƒürafi Etki sekmesini olu≈ütur"""
        tab2 = ttk.Frame(self.vis_notebook)
        self.vis_notebook.add(tab2, text="Coƒürafi Etki")
        
        # Harita i√ßin canvas
        self.map_frame = ttk.Frame(tab2)
        self.map_frame.pack(fill=tk.BOTH, expand=True)
        
        # Ba≈ülangƒ±√ßta bo≈ü bir harita
        self.map_label = ttk.Label(self.map_frame, text="Harita y√ºkleniyor...")
        self.map_label.pack(fill=tk.BOTH, expand=True)
    
    def create_time_series_tab(self):
        """Zaman Serisi sekmesini olu≈ütur"""
        tab3 = ttk.Frame(self.vis_notebook)
        self.vis_notebook.add(tab3, text="Zaman Etkisi")
        
        self.fig_time = plt.figure(figsize=(8, 4), facecolor=self.colors['background'])
        self.ax_time = self.fig_time.add_subplot(111)
        
        self.canvas_time = FigureCanvasTkAgg(self.fig_time, master=tab3)
        self.canvas_time.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def create_macro_impact_tab(self):
        """Makro Ekonomik Etki sekmesini olu≈ütur"""
        tab4 = ttk.Frame(self.vis_notebook)
        self.vis_notebook.add(tab4, text="Makro Etki")
        
        self.fig_macro = plt.figure(figsize=(8, 5), facecolor=self.colors['background'])
        self.ax_macro = self.fig_macro.add_subplot(111)
        
        self.canvas_macro = FigureCanvasTkAgg(self.fig_macro, master=tab4)
        self.canvas_macro.get_tk_widget().pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
    
    def create_footer(self):
        """Alt bilgi alanƒ±nƒ± olu≈ütur"""
        footer_frame = ttk.Frame(self.root, style='TFrame')
        footer_frame.pack(fill=tk.X, padx=20, pady=(0,15))
        
        # Sistem durumu
        status_frame = ttk.Frame(footer_frame, style='TFrame')
        status_frame.pack(side=tk.LEFT)
        
        self.system_status = ttk.Label(status_frame, 
                                     text="Sistem Durumu: √áalƒ±≈üƒ±yor | AI: Aktif | Veri Akƒ±≈üƒ±: %100",
                                     foreground=self.colors['success'])
        self.system_status.pack(side=tk.LEFT, padx=10)
        
        # Copyright
        ttk.Label(footer_frame, 
                 text="¬© 2025 Ultimate Banka Hack Analiz Sistemi | T√ºm haklarƒ± saklƒ±dƒ±r",
                 foreground=self.colors['light_text']).pack(side=tk.RIGHT)
        
        # Yardƒ±m butonlarƒ±
        help_frame = ttk.Frame(footer_frame, style='TFrame')
        help_frame.pack(side=tk.RIGHT, padx=20)
        
        ttk.Button(help_frame, text="Yardƒ±m", 
                  command=self.open_help, style='Link.TButton').pack(side=tk.LEFT, padx=5)
        ttk.Button(help_frame, text="Hakkƒ±nda", 
                  command=self.about, style='Link.TButton').pack(side=tk.LEFT, padx=5)
    
    def create_ai_panel(self):
        """Yapay Zeka panelini olu≈ütur"""
        self.ai_window = tk.Toplevel(self.root)
        self.ai_window.title("Yapay Zeka Kontrol Paneli")
        self.ai_window.geometry("400x600")
        self.ai_window.withdraw()  # Ba≈ülangƒ±√ßta gizli
        
        # AI kontrol elemanlarƒ± buraya eklenecek
        # ...
    
    def create_blockchain_panel(self):
        """Blockchain panelini olu≈ütur"""
        self.blockchain_window = tk.Toplevel(self.root)
        self.blockchain_window.title("Blockchain ƒ∞zleyici")
        self.blockchain_window.geometry("500x700")
        self.blockchain_window.withdraw()  # Ba≈ülangƒ±√ßta gizli
        
        # Blockchain kontrol elemanlarƒ± buraya eklenecek
        # ...
    
    def setup_3d_visualization(self):
        """3D g√∂rselle≈ütirme ayarlarƒ±"""
        # Bu fonksiyon 3D g√∂rselle≈ütirme i√ßin gerekli ayarlarƒ± yapar
        pass
    
    def load_ai_model(self):
        """AI modelini y√ºkler"""
        try:
            # Basit bir Random Forest modeli olu≈ütur
            model = RandomForestRegressor(n_estimators=100, random_state=42)
            
            # Modeli eƒüitmek i√ßin √∂rnek veri olu≈ütur
            X = np.random.rand(100, 5)
            y = np.random.rand(100) * 100000000
            
            model.fit(X, y)
            return model
        except Exception as e:
            messagebox.showerror("AI Hatasƒ±", f"Model y√ºklenirken hata olu≈ütu: {str(e)}")
            return None
    
    def load_historical_data(self):
        """Tarihsel verileri y√ºkler"""
        # √ñrnek veri olu≈ütur
        data = {
            'date': pd.date_range(start='2020-01-01', periods=24, freq='M'),
            'loss_amount': np.random.randint(1000000, 50000000, size=24),
            'recovery_time': np.random.randint(1, 12, size=24),
            'country': ['USA', 'UK', 'Germany', 'Japan'] * 6,
            'attack_type': ['Phishing', 'DDoS', 'Malware', 'Insider'] * 6
        }
        return pd.DataFrame(data)
    
    def setup_realtime_updates(self):
        """Ger√ßek zamanlƒ± veri g√ºncellemelerini ayarlar"""
        def update_realtime():
            while True:
                try:
                    # CPU ve RAM kullanƒ±mƒ±nƒ± g√ºncelle
                    cpu = random.random() * 10
                    ram = random.random() * 30
                    self.cpu_usage.config(text=f"CPU: %{cpu:.0f} | RAM: %{ram:.0f}")
                    
                    # Sistem durumunu g√ºncelle
                    status_text = f"‚úì √áevrimi√ßi | AI: Aktif | Veri G√ºvenliƒüi: %{100 - random.random()*5:.0f}"
                    self.status_label.config(text=status_text)
                    self.system_status.config(text=f"Sistem Durumu: √áalƒ±≈üƒ±yor | AI: Aktif | Veri Akƒ±≈üƒ±: %{100 - random.random()*5:.0f}")
                    
                    time.sleep(3)
                except:
                    break
        
        # Arka planda √ßalƒ±≈üacak thread
        threading.Thread(target=update_realtime, daemon=True).start()
    
    def load_sample_data(self):
        """√ñrnek veri y√ºkle"""
        entries = [
            ("banka_adi", "√ñrnek Banka A.≈û."),
            ("calinan_miktar", "50000000"),
            ("onarim_maliyeti", "2000000"),
            ("yasal_cezalar", "5000000"),
            ("hisse_kaybi", "15"),
            ("piyasa_degeri", "1000000000"),
            ("kesinti_suresi", "24"),
            ("saatlik_islem", "1000000"),
            ("musteri_sayisi", "5000000"),
            ("ulke_sayisi", "3")
        ]
        
        for attr_name, value in entries:
            entry = getattr(self, attr_name)
            entry.delete(0, tk.END)
            entry.insert(0, value)
        
        self.risk_level.set(30)
        self.ai_recommendation.config(text="√ñrnek veriler y√ºklendi. Hesaplamak i√ßin 'Hesapla' butonuna basƒ±n.",
                                    foreground=self.colors['warning'])
    
    def advanced_hesapla(self):
        """Geli≈ümi≈ü hesaplama fonksiyonu"""
        try:
            # Verileri al
            banka_adi = self.banka_adi.get()
            calinan = float(self.calinan_miktar.get())
            onarim = float(self.onarim_maliyeti.get())
            ceza = float(self.yasal_cezalar.get())
            hisse_kayip = float(self.hisse_kaybi.get()) / 100
            piyasa_deger = float(self.piyasa_degeri.get())
            kesinti = float(self.kesinti_suresi.get())
            saatlik_islem = float(self.saatlik_islem.get())
            musteri_sayisi = float(self.musteri_sayisi.get())
            ulke_sayisi = float(self.ulke_sayisi.get())
            
            # Temel hesaplamalar
            toplam_dogrudan_kayip = calinan + onarim + ceza
            marka_degeri_kaybi = hisse_kayip * piyasa_deger
            operasyonel_kayip = kesinti * saatlik_islem
            toplam_kayip = toplam_dogrudan_kayip + marka_degeri_kaybi + operasyonel_kayip
            
            # M√º≈üteri ba≈üƒ±na kayƒ±p
            musteri_basi_kayip = toplam_kayip / musteri_sayisi if musteri_sayisi > 0 else 0
            
            # GSYƒ∞H kar≈üƒ±la≈ütƒ±rmasƒ± (T√ºrkiye i√ßin yakla≈üƒ±k 850 milyar $)
            gsyih_oran = (toplam_kayip/850000000000)*100
            
            # Senaryoya g√∂re ekstra hesaplamalar
            scenario = self.scenario_var.get()
            scenario_multiplier = 1.0
            scenario_text = ""
            
            if scenario == "ƒ∞√ßeriden Sabotaj":
                scenario_multiplier = 1.3
                scenario_text = "ƒ∞√ßeriden sabotaj senaryosu: %30 ek risk primi uygulandƒ±"
            elif scenario == "Devlet Destekli":
                scenario_multiplier = 1.7
                scenario_text = "Devlet destekli saldƒ±rƒ± senaryosu: %70 ek risk primi uygulandƒ±"
            elif scenario == "Siber Sava≈ü":
                scenario_multiplier = 2.0
                scenario_text = "Siber sava≈ü senaryosu: %100 ek risk primi uygulandƒ±"
            
            toplam_kayip *= scenario_multiplier
            
            # Risk seviyesini belirle
            risk_seviyesi = min(100, max(0, (toplam_kayip / 50000000) * 100))  # 50M$'a g√∂re y√ºzdelik
            self.risk_level.set(risk_seviyesi)
            
            risk_durumu = "D√ú≈û√úK"
            risk_rengi = self.colors['success']
            if risk_seviyesi > 70:
                risk_durumu = "√áOK Y√úKSEK"
                risk_rengi = self.colors['accent']
            elif risk_seviyesi > 50:
                risk_durumu = "Y√úKSEK"
                risk_rengi = '#e67e22'
            elif risk_seviyesi > 30:
                risk_durumu = "ORTA"
                risk_rengi = self.colors['warning']
            
            # AI tahmini yap
            ai_prediction = self.predict_with_ai(toplam_dogrudan_kayip, marka_degeri_kaybi, 
                                               operasyonel_kayip, musteri_sayisi, ulke_sayisi)
            
            # Sonu√ßlarƒ± g√∂ster
            sonuc_text = f"üè¶ Banka: {banka_adi}\n"
            sonuc_text += "="*50 + "\n"
            sonuc_text += "üîç Kapsamlƒ± Analiz Sonu√ßlarƒ±:\n\n"
            
            sonuc_text += "üí∏ Doƒürudan Kayƒ±plar:\n"
            sonuc_text += f"  ‚Ä¢ √áalƒ±nan Miktar: ${calinan:,.2f}\n"
            sonuc_text += f"  ‚Ä¢ Sistem Onarƒ±mƒ±: ${onarim:,.2f}\n"
            sonuc_text += f"  ‚Ä¢ Yasal Cezalar: ${ceza:,.2f}\n"
            sonuc_text += f"  ‚Üí Toplam Doƒürudan Kayƒ±p: ${toplam_dogrudan_kayip:,.2f}\n\n"
            
            sonuc_text += "üìâ Dolaylƒ± Kayƒ±plar:\n"
            sonuc_text += f"  ‚Ä¢ Hisse Deƒüeri Kaybƒ± (%{hisse_kayip*100:.1f}): ${marka_degeri_kaybi:,.2f}\n"
            sonuc_text += f"  ‚Ä¢ Operasyonel Kesinti Kaybƒ±: ${operasyonel_kayip:,.2f}\n\n"
            
            sonuc_text += "üî• Genel Toplam Kayƒ±p:\n"
            sonuc_text += f"  ${toplam_kayip:,.2f}\n\n"
            
            sonuc_text += "üåç Makro Ekonomik Etki:\n"
            sonuc_text += f"  ‚Ä¢ T√ºrkiye GSYƒ∞H'sƒ±na oranƒ±: %{gsyih_oran:.6f}\n"
            sonuc_text += f"  ‚Ä¢ M√º≈üteri ba≈üƒ±na kayƒ±p: ${musteri_basi_kayip:,.2f}\n"
            sonuc_text += f"  ‚Ä¢ Risk Seviyesi: {risk_durumu} (%{risk_seviyesi:.1f})\n"
            sonuc_text += f"  ‚Ä¢ Senaryo: {scenario_text}\n"
            sonuc_text += "="*50 + "\n"
            sonuc_text += "ü§ñ AI Tahmini:\n"
            sonuc_text += f"  ‚Ä¢ Beklenen iyile≈üme s√ºresi: {ai_prediction.get('recovery_time', 'N/A')} ay\n"
            sonuc_text += f"  ‚Ä¢ Potansiyel m√º≈üteri kaybƒ±: %{ai_prediction.get('customer_loss', 'N/A'):.1f}\n"
            sonuc_text += "="*50 + "\n"
            sonuc_text += "‚ö†Ô∏è Uyarƒ±: Bu sonu√ßlar tahmini deƒüerlerdir. Detaylƒ± analiz i√ßin uzman g√∂r√º≈ü√º alƒ±nƒ±z."
            
            self.sonuc_metni.config(state=tk.NORMAL)
            self.sonuc_metni.delete(1.0, tk.END)
            self.sonuc_metni.insert(tk.END, sonuc_text)
            self.sonuc_metni.config(state=tk.DISABLED)
            
            # AI sonu√ßlarƒ±nƒ± g√∂ster
            self.show_ai_results(ai_prediction)
            
            # Grafikleri g√ºncelle
            self.update_charts(toplam_dogrudan_kayip, marka_degeri_kaybi, operasyonel_kayip, 
                             musteri_sayisi, ulke_sayisi, scenario_multiplier)
            
            # Risk g√∂stergesini g√ºncelle
            self.risk_meter.config(style=f"Horizontal.TProgressbar", troughcolor='white',
                                 background=risk_rengi)
            self.ai_recommendation.config(text=f"AI √ñNERƒ∞Sƒ∞: {ai_prediction.get('recommendation', 'Veri yetersiz')}",
                                        foreground=self.colors['text'])
            
        except ValueError as e:
            messagebox.showerror("Hata", f"Ge√ßersiz veri giri≈üi! L√ºtfen t√ºm alanlarƒ± kontrol edin.\n{str(e)}")
            self.risk_level.set(0)
            self.ai_recommendation.config(text="Hesaplama yapƒ±lamadƒ±. Verileri kontrol edin.",
                                        foreground=self.colors['accent'])
    
    def predict_with_ai(self, direct_loss, brand_loss, operational_loss, customers, countries):
        """AI ile tahmin yapar"""
        if not self.ai_model:
            return {"error": "AI modeli y√ºklenemedi"}
        
        try:
            # √ñzellik vekt√∂r√º olu≈ütur
            features = np.array([[
                direct_loss / 1000000, 
                brand_loss / 1000000, 
                operational_loss / 1000000,
                customers / 1000000,
                countries
            ]])
            
            # Tahmin yap
            recovery_time = self.ai_model.predict(features)[0]
            
            # √ñneri olu≈ütur
            recommendations = [
                "Acil olarak siber g√ºvenlik ekibini geni≈ületin",
                "M√º≈üterilere y√∂nelik ≈üeffaf bir ileti≈üim stratejisi uygulayƒ±n",
                "Finansal kayƒ±plarƒ± dengelemek i√ßin yatƒ±rƒ±mcƒ±larla g√∂r√º≈ü√ºn",
                "Reg√ºlat√∂rlerle proaktif ileti≈üim kurun",
                "Kriz y√∂netimi ekibi olu≈üturun"
            ]
            
            # Senaryoya g√∂re ek √∂neri ekle
            scenario = self.scenario_var.get()
            if scenario == "ƒ∞√ßeriden Sabotaj":
                recommendations.append("ƒ∞√ß denetim s√ºre√ßlerini g√∂zden ge√ßirin")
            elif scenario == "Devlet Destekli":
                recommendations.append("H√ºk√ºmet yetkilileriyle acil g√∂r√º≈üme talep edin")
            elif scenario == "Siber Sava≈ü":
                recommendations.append("NATO siber savunma birimleriyle ileti≈üime ge√ßin")
            
            return {
                "recovery_time": max(1, min(24, int(recovery_time))),
                "customer_loss": min(30, max(5, (direct_loss / 10000000))),
                "recommendation": random.choice(recommendations),
                "risk_score": min(100, (direct_loss + brand_loss) / 2000000)
            }
        except Exception as e:
            print(f"AI tahmin hatasƒ±: {str(e)}")
            return {"error": str(e)}
    
    def show_ai_results(self, prediction):
        """AI sonu√ßlarƒ±nƒ± g√∂sterir"""
        self.ai_result_text.config(state=tk.NORMAL)
        self.ai_result_text.delete(1.0, tk.END)
        
        if 'error' in prediction:
            self.ai_result_text.insert(tk.END, f"AI Analiz Hatasƒ±:\n{prediction['error']}")
        else:
            text = "ü§ñ YAPAY ZEKA ANALƒ∞Z SONU√áLARI\n"
            text += "="*50 + "\n\n"
            text += f"‚è≥ Tahmini ƒ∞yile≈üme S√ºresi: {prediction['recovery_time']} ay\n\n"
            text += f"üë• Tahmini M√º≈üteri Kaybƒ±: %{prediction['customer_loss']:.1f}\n\n"
            text += f"üìä Risk Skoru: {prediction.get('risk_score', 'N/A')}/100\n\n"
            text += "üí° √ñneriler:\n"
            
            self.ai_recommendations.delete(0, tk.END)
            recommendations = [
                prediction['recommendation'],
                "Sigorta kapsamƒ±nƒ± g√∂zden ge√ßirin",
                "Halkla ili≈ükiler stratejisi olu≈üturun",
                "Finansal denetim yapƒ±n"
            ]
            
            for rec in recommendations:
                self.ai_recommendations.insert(tk.END, f"‚Ä¢ {rec}")
                text += f"‚Ä¢ {rec}\n"
            
            self.ai_result_text.insert(tk.END, text)
        
        self.ai_result_text.config(state=tk.DISABLED)
    
    def update_charts(self, direct_loss, brand_loss, operational_loss, customers, countries, scenario_multiplier):
        """T√ºm grafikleri g√ºnceller"""
        # 3D Kayƒ±p Daƒüƒ±lƒ±mƒ±
        self.update_3d_chart(direct_loss, brand_loss, operational_loss)
        
        # Coƒürafi Etki Haritasƒ±
        self.update_geo_map(customers, countries)
        
        # Zaman Serisi Grafiƒüi
        self.update_time_series(direct_loss + brand_loss + operational_loss)
        
        # Makro Ekonomik Etki
        self.update_macro_chart(direct_loss, brand_loss, operational_loss, scenario_multiplier)
    
    def update_3d_chart(self, direct_loss, brand_loss, operational_loss):
        """3D grafiƒüi g√ºnceller"""
        self.ax_3d.clear()
        
        # Veriler
        categories = ['Doƒürudan', 'Marka', 'Operasyonel']
        values = [direct_loss, brand_loss, operational_loss]
        colors = [self.colors['accent'], self.colors['warning'], self.colors['light_accent']]
        
        # 3D √ßubuk grafik
        xpos = [0, 1, 2]
        ypos = [0, 0, 0]
        zpos = [0, 0, 0]
        
        dx = dy = 0.5
        dz = [v / 1000000 for v in values]  # Milyon cinsinden
        
        self.ax_3d.bar3d(xpos, ypos, zpos, dx, dy, dz, color=colors, shade=True)
        
        # Eksen etiketleri
        self.ax_3d.set_xticks([0.25, 1.25, 2.25])
        self.ax_3d.set_xticklabels(categories)
        self.ax_3d.set_ylabel('')
        self.ax_3d.set_zlabel('Kayƒ±p (Milyon $)')
        
        # Ba≈ülƒ±k
        self.ax_3d.set_title('3D Kayƒ±p Daƒüƒ±lƒ±mƒ±', fontsize=12, pad=20)
        
        self.canvas_3d.draw()
    
    def update_geo_map(self, customers, countries):
        """Coƒürafi haritayƒ± g√ºnceller"""
        try:
            # √ñrnek veri olu≈ütur
            country_data = {
                'Turkey': random.randint(1000000, 5000000),
                'Germany': random.randint(500000, 2000000),
                'USA': random.randint(2000000, 8000000),
                'UK': random.randint(300000, 1500000)
            }
            
            # Harita olu≈ütur
            m = folium.Map(location=[39, 35], zoom_start=2)
            
            # Isƒ± haritasƒ± verileri
            heat_data = []
            for country, value in country_data.items():
                # Basit bir konum e≈üleme
                if country == 'Turkey':
                    lat, lon = 39, 35
                elif country == 'Germany':
                    lat, lon = 51, 10
                elif country == 'USA':
                    lat, lon = 38, -97
                elif country == 'UK':
                    lat, lon = 55, -3
                
                heat_data.append([lat, lon, value / 1000000])  # Milyon cinsinden
            
            # Isƒ± haritasƒ± ekle
            HeatMap(heat_data, radius=15).add_to(m)
            
            # Haritayƒ± HTML olarak kaydet
            map_html = "temp_map.html"
            m.save(map_html)
            
            # HTML'yi g√∂r√ºnt√ºle
            self.show_map_in_frame(map_html)
            
        except Exception as e:
            print(f"Harita olu≈üturma hatasƒ±: {str(e)}")
            self.map_label.config(text=f"Harita y√ºklenirken hata olu≈ütu: {str(e)}")
    
    def show_map_in_frame(self, html_file):
        """Haritayƒ± frame i√ßinde g√∂ster"""
        try:
            # √ñnceki widget'larƒ± temizle
            for widget in self.map_frame.winfo_children():
                widget.destroy()
            
            # Webview olu≈ütur (basit bir alternatif)
            from tkinterweb import HtmlFrame
            map_frame = HtmlFrame(self.map_frame)
            map_frame.load_file(html_file)
            map_frame.pack(fill=tk.BOTH, expand=True)
            
        except:
            # Alternatif y√∂ntem
            self.map_label = ttk.Label(self.map_frame, text="Harita g√∂r√ºnt√ºlenemiyor. Tarayƒ±cƒ±da a√ßmak i√ßin tƒ±klayƒ±n.")
            self.map_label.pack(fill=tk.BOTH, expand=True)
            self.map_label.bind("<Button-1>", lambda e: webbrowser.open(html_file))
    
    def update_time_series(self, total_loss):
        """Zaman serisi grafiƒüini g√ºnceller"""
        self.ax_time.clear()
        
        # Veriler
        months = ['Olay', '1 Ay', '3 Ay', '6 Ay', '1 Yƒ±l']
        recovery = [100, 85 - random.random()*10, 70 - random.random()*15, 
                   50 - random.random()*20, 30 - random.random()*15]
        
        # √áizgi grafiƒüi
        self.ax_time.plot(months, recovery, marker='o', color=self.colors['accent'],
                         linewidth=2, markersize=8, markerfacecolor='white',
                         markeredgewidth=2, markeredgecolor=self.colors['accent'])
        
        # Alan grafiƒüi
        self.ax_time.fill_between(months, recovery, color=self.colors['accent'], alpha=0.1)
        
        # Eksenler
        self.ax_time.set_ylim(0, 110)
        self.ax_time.set_ylabel('Etki (%)', color=self.colors['primary'])
        self.ax_time.grid(True, linestyle='--', alpha=0.5)
        
        # Ba≈ülƒ±k
        self.ax_time.set_title('Zamana G√∂re ƒ∞yile≈üme Projeksiyonu', fontsize=12, 
                             pad=15, color=self.colors['primary'])
        
        self.canvas_time.draw()
    
    def update_macro_chart(self, direct_loss, brand_loss, operational_loss, scenario_multiplier):
        """Makro ekonomik etki grafiƒüini g√ºnceller"""
        self.ax_macro.clear()
        
        # Veriler
        categories = ['GSYƒ∞H Etkisi', 'Enflasyon', 'ƒ∞≈üsizlik', 'Borsa', 'D√∂viz']
        base_values = [direct_loss/850000000, 
                      (direct_loss + operational_loss)/10000000, 
                      operational_loss/5000000, 
                      brand_loss/100000000, 
                      (direct_loss + brand_loss)/50000000]
        
        # Senaryo √ßarpanƒ±nƒ± uygula
        values = [v * scenario_multiplier for v in base_values]
        
        # Renkler
        colors = []
        for val in values:
            if val > 0.7:
                colors.append(self.colors['accent'])
            elif val > 0.4:
                colors.append(self.colors['warning'])
            else:
                colors.append(self.colors['success'])
        
        # √áubuk grafik
        bars = self.ax_macro.bar(categories, values, color=colors, edgecolor='white')
        
        # √áubuk etiketleri
        for bar in bars:
            height = bar.get_height()
            self.ax_macro.text(bar.get_x() + bar.get_width()/2., height,
                             f'{height:.2f}%',
                             ha='center', va='bottom', fontsize=8)
        
        # Eksenler
        self.ax_macro.set_ylim(0, max(values)*1.2)
        self.ax_macro.set_ylabel('Etki Y√ºzdesi', color=self.colors['primary'])
        self.ax_macro.grid(axis='y', linestyle='--', alpha=0.5)
        
        # Ba≈ülƒ±k
        self.ax_macro.set_title('Makroekonomik Etki Projeksiyonu', fontsize=12, 
                              pad=15, color=self.colors['primary'])
        
        self.canvas_macro.draw()
    
    def track_blockchain(self):
        """Blockchain i≈ülemini takip eder"""
        tx_hash = self.blockchain_entry.get().strip()
        if not tx_hash:
            messagebox.showwarning("Uyarƒ±", "L√ºtfen ge√ßerli bir i≈ülem hash'i girin")
            return
        
        try:
            self.blockchain_text.config(state=tk.NORMAL)
            self.blockchain_text.delete(1.0, tk.END)
            self.blockchain_text.insert(tk.END, f"{tx_hash} i≈ülemi aranƒ±yor...\n\n")
            self.blockchain_text.see(tk.END)
            
            # Sim√ºle edilmi≈ü blockchain verileri
            time.sleep(1)  # Ger√ßek√ßi bir bekleme
            
            fake_data = {
                "hash": tx_hash,
                "from": "0x" + ''.join(random.choices('0123456789abcdef', k=40)),
                "to": "0x" + ''.join(random.choices('0123456789abcdef', k=40)),
                "value": random.randint(1000, 50000),
                "block": random.randint(15000000, 16000000),
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "confirmations": random.randint(10, 5000)
            }
            
            self.blockchain_text.insert(tk.END, json.dumps(fake_data, indent=4))
            self.blockchain_text.insert(tk.END, "\n\nƒ∞≈ülem ba≈üarƒ±yla bulundu. Para akƒ±≈üƒ±nƒ± g√∂rselle≈ütirmek i√ßin butona basƒ±n.")
            self.blockchain_text.config(state=tk.DISABLED)
            
        except Exception as e:
            self.blockchain_text.insert(tk.END, f"\nHata olu≈ütu: {str(e)}")
            self.blockchain_text.config(state=tk.DISABLED)
    
    def visualize_money_flow(self):
        """Para akƒ±≈üƒ±nƒ± g√∂rselle≈ütirir"""
        try:
            # Plotly ile interaktif grafik olu≈ütur
            fig = go.Figure(go.Sankey(
                node=dict(
                    pad=15,
                    thickness=20,
                    line=dict(color="black", width=0.5),
                    label=["Kaynak C√ºzdan", "Ara C√ºzdan 1", "Ara C√ºzdan 2", "Hedef C√ºzdan"],
                    color=["blue", "green", "purple", "red"]
                ),
                link=dict(
                    source=[0, 1, 2],  # Kaynak indeksleri
                    target=[1, 2, 3],   # Hedef indeksleri
                    value=[1000000, 500000, 500000]  # Transfer miktarlarƒ±
                )
            ))
            
            fig.update_layout(title_text="Para Akƒ±≈üƒ± - Blockchain ƒ∞zleme", font_size=10)
            
            # HTML olarak kaydet ve tarayƒ±cƒ±da a√ß
            fig.write_html("money_flow.html")
            webbrowser.open("money_flow.html")
            
        except Exception as e:
            messagebox.showerror("Hata", f"G√∂rselle≈ütirme olu≈üturulamadƒ±:\n{str(e)}")
    
    def save_blockchain_data(self):
        """Blockchain verilerini kaydeder"""
        try:
            filename = f"blockchain_tracking_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, "w") as f:
                f.write(self.blockchain_text.get(1.0, tk.END))
            messagebox.showinfo("Ba≈üarƒ±lƒ±", f"Blockchain verileri '{filename}' dosyasƒ±na kaydedildi!")
        except Exception as e:
            messagebox.showerror("Hata", f"Dosya kaydedilirken hata olu≈ütu:\n{str(e)}")
    
    def run_detailed_ai_analysis(self):
        """Detaylƒ± AI analizi yapar"""
        self.ai_result_text.config(state=tk.NORMAL)
        self.ai_result_text.delete(1.0, tk.END)
        self.ai_result_text.insert(tk.END, "ü§ñ AI detaylƒ± analiz yapƒ±yor... L√ºtfen bekleyiniz.\n")
        self.ai_result_text.see(tk.END)
        self.ai_result_text.config(state=tk.DISABLED)
        
        # Uzun s√ºren bir i≈ülemi sim√ºle et
        def analyze():
            time.sleep(3)  # Analiz s√ºresini sim√ºle et
            
            # Rastgele sonu√ßlar olu≈ütur
            analysis_results = [
                "‚è≥ Tahmini tam iyile≈üme s√ºresi: %d ay" % random.randint(6, 24),
                "üìâ En y√ºksek kayƒ±p d√∂nemi: ƒ∞lk %d hafta" % random.randint(2, 8),
                "üë• M√º≈üteri g√ºveni geri kazanma s√ºresi: %d ay" % random.randint(3, 12),
                "üìä Hisselerin eski seviyeye gelme s√ºresi: %d ay" % random.randint(9, 36),
                "üí∏ Sigorta kapsamƒ±: %d%% kayƒ±p kar≈üƒ±lanabilir" % random.randint(30, 80),
                "‚ö†Ô∏è Potansiyel reg√ºlasyon cezalarƒ±: $%dM - $%dM" % (random.randint(1,5), random.randint(5,10))
            ]
            
            self.ai_result_text.config(state=tk.NORMAL)
            self.ai_result_text.delete(1.0, tk.END)
            self.ai_result_text.insert(tk.END, "üîç DETAYLI AI ANALƒ∞Z SONU√áLARI\n")
            self.ai_result_text.insert(tk.END, "="*50 + "\n\n")
            
            for result in analysis_results:
                self.ai_result_text.insert(tk.END, f"‚Ä¢ {result}\n\n")
            
            self.ai_result_text.insert(tk.END, "="*50 + "\n")
            self.ai_result_text.insert(tk.END, "‚ÑπÔ∏è Bu sonu√ßlar tahmini deƒüerlerdir. Ger√ßek sonu√ßlar farklƒ±lƒ±k g√∂sterebilir.")
            self.ai_result_text.config(state=tk.DISABLED)
        
        threading.Thread(target=analyze, daemon=True).start()
    
    def run_future_prediction(self):
        """Gelecek tahmini yapar"""
        self.ai_result_text.config(state=tk.NORMAL)
        self.ai_result_text.delete(1.0, tk.END)
        self.ai_result_text.insert(tk.END, "üîÆ AI gelecek tahmini yapƒ±yor... L√ºtfen bekleyiniz.\n")
        self.ai_result_text.see(tk.END)
        self.ai_result_text.config(state=tk.DISABLED)
        
        # Uzun s√ºren bir i≈ülemi sim√ºle et
        def predict():
            time.sleep(2)  # Tahmin s√ºresini sim√ºle et
            
            # Rastgele tahminler olu≈ütur
            predictions = [
                "üìà √ñn√ºm√ºzdeki 3 ay i√ßinde hisselerde %d%% - %d%% dalgalanma bekleniyor" % (random.randint(5,15), random.randint(15,30)),
                "üõ°Ô∏è %d hafta i√ßinde yeni bir siber g√ºvenlik √∂nlemi uygulanmasƒ± √∂neriliyor" % random.randint(2,8),
                "üíº %d ay i√ßinde yeni yatƒ±rƒ±mcƒ±larƒ±n devreye girmesi bekleniyor" % random.randint(3,9),
                "üåç %d √ºlkede reg√ºlasyon deƒüi≈üikliƒüi riski bulunuyor" % random.randint(1,5),
                "üí∞ %d%% olasƒ±lƒ±kla sigorta ≈üirketi ek tazminat talebinde bulunacak" % random.randint(30,70)
            ]
            
            self.ai_result_text.config(state=tk.NORMAL)
            self.ai_result_text.delete(1.0, tk.END)
            self.ai_result_text.insert(tk.END, "üîÆ AI GELECEK TAHMƒ∞NLERƒ∞\n")
            self.ai_result_text.insert(tk.END, "="*50 + "\n\n")
            
            for prediction in predictions:
                self.ai_result_text.insert(tk.END, f"‚Ä¢ {prediction}\n\n")
            
            self.ai_result_text.insert(tk.END, "="*50 + "\n")
            self.ai_result_text.insert(tk.END, "‚ÑπÔ∏è Bu tahminler ge√ßmi≈ü verilere dayalƒ± istatistiksel projeksiyonlardƒ±r.")
            self.ai_result_text.config(state=tk.DISABLED)
        
        threading.Thread(target=predict, daemon=True).start()
    
    def update_scenario(self):
        """Senaryo se√ßimini g√ºnceller"""
        scenario = self.scenario_var.get()
        messagebox.showinfo("Senaryo G√ºncellendi", f"'{scenario}' senaryosu se√ßildi. Hesaplamayƒ± yenilemek i√ßin 'Hesapla' butonuna basƒ±n.")
    
    def create_custom_scenario(self):
        """√ñzel senaryo olu≈üturur"""
        custom_window = tk.Toplevel(self.root)
        custom_window.title("√ñzel Senaryo Olu≈ütur")
        custom_window.geometry("500x400")
        
        ttk.Label(custom_window, text="√ñzel Senaryo Adƒ±:").pack(pady=(10,0))
        name_entry = ttk.Entry(custom_window)
        name_entry.pack(fill=tk.X, padx=20, pady=5)
        
        ttk.Label(custom_window, text="Risk √áarpanƒ± (1.0-5.0):").pack(pady=(10,0))
        multiplier_entry = ttk.Entry(custom_window)
        multiplier_entry.pack(fill=tk.X, padx=20, pady=5)
        
        ttk.Label(custom_window, text="Ek √ñzellikler:").pack(pady=(10,0))
        features_frame = ttk.Frame(custom_window)
        features_frame.pack(fill=tk.X, padx=20, pady=5)
        
        # √ñzellik se√ßimleri
        features = [
            ("Devlet M√ºdahalesi", "gov_intervention"),
            ("Medya Etkisi", "media_impact"),
            ("K√ºresel Etki", "global_impact"),
            ("Veri Sƒ±zƒ±ntƒ±sƒ±", "data_leak"),
            ("Fidye Yazƒ±lƒ±mƒ±", "ransomware")
        ]
        
        self.feature_vars = {}
        for i, (text, var_name) in enumerate(features):
            var = tk.BooleanVar()
            cb = ttk.Checkbutton(features_frame, text=text, variable=var)
            cb.grid(row=i//2, column=i%2, sticky="w", padx=5, pady=2)
            self.feature_vars[var_name] = var
        
        # Kaydet butonu
        ttk.Button(custom_window, text="Senaryoyu Kaydet", 
                  command=lambda: self.save_custom_scenario(
                      name_entry.get(),
                      multiplier_entry.get(),
                      {k: v.get() for k, v in self.feature_vars.items()},
                      custom_window
                  ), style='Accent.TButton').pack(pady=20)
    
    def save_custom_scenario(self, name, multiplier, features, window):
        """√ñzel senaryoyu kaydeder"""
        try:
            multiplier = float(multiplier)
            if not 1.0 <= multiplier <= 5.0:
                raise ValueError("√áarpan 1.0-5.0 aralƒ±ƒüƒ±nda olmalƒ±")
            
            if not name:
                raise ValueError("Senaryo adƒ± bo≈ü olamaz")
            
            # Senaryoyu kaydet (ger√ßek uygulamada veritabanƒ±na kaydedilir)
            messagebox.showinfo("Ba≈üarƒ±lƒ±", f"'{name}' senaryosu kaydedildi!\nRisk √áarpanƒ±: {multiplier}x")
            window.destroy()
            
            # Senaryo listesine ekle
            self.scenario_var.set(name)
            
        except ValueError as e:
            messagebox.showerror("Hata", f"Ge√ßersiz giri≈ü:\n{str(e)}")
    
    def save_results(self):
        """Sonu√ßlarƒ± kaydeder"""
        try:
            filename = f"banka_hack_analiz_raporu_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, "w", encoding="utf-8") as f:
                f.write(self.sonuc_metni.get(1.0, tk.END))
            messagebox.showinfo("Ba≈üarƒ±lƒ±", f"Sonu√ßlar '{filename}' dosyasƒ±na kaydedildi!")
        except Exception as e:
            messagebox.showerror("Hata", f"Dosya kaydedilirken bir hata olu≈ütu:\n{str(e)}")
    
    def generate_advanced_report(self):
        """Geli≈ümi≈ü rapor olu≈üturur"""
        report_window = tk.Toplevel(self.root)
        report_window.title("Geli≈ümi≈ü Rapor Olu≈ütur")
        report_window.geometry("600x500")
        
        ttk.Label(report_window, 
                 text="Geli≈ümi≈ü Rapor Olu≈üturma",
                 font=('Segoe UI', 14, 'bold')).pack(pady=20)
        
        # Rapor se√ßenekleri
        options_frame = ttk.Frame(report_window)
        options_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=10)
        
        # Format se√ßimi
        ttk.Label(options_frame, text="Rapor Formatƒ±:").grid(row=0, column=0, sticky="w", pady=5)
        self.report_format = ttk.Combobox(options_frame, 
                                        values=["PDF (Profesyonel)", "HTML (ƒ∞nteraktif)", 
                                               "Word (Detaylƒ±)", "Excel (Veri Analizi)"])
        self.report_format.current(0)
        self.report_format.grid(row=0, column=1, sticky="ew", pady=5)
        
        # Detay seviyesi
        ttk.Label(options_frame, text="Detay Seviyesi:").grid(row=1, column=0, sticky="w", pady=5)
        self.detail_level = ttk.Combobox(options_frame, 
                                        values=["√ñzet (Y√∂netici √ñzeti)", 
                                               "Standart (Temel Analiz)", 
                                               "Detaylƒ± (Teknik Rapor)", 
                                               "Tam (T√ºm Veriler)"])
        self.detail_level.current(1)
        self.detail_level.grid(row=1, column=1, sticky="ew", pady=5)
        
        # Grafik se√ßenekleri
        ttk.Label(options_frame, text="Grafikler:").grid(row=2, column=0, sticky="w", pady=5)
        self.graph_options = tk.Listbox(options_frame, height=4, selectmode=tk.MULTIPLE)
        self.graph_options.grid(row=2, column=1, sticky="ew", pady=5)
        
        for option in ["Kayƒ±p Daƒüƒ±lƒ±mƒ±", "Zaman Serisi", "Coƒürafi Etki", "Makro Ekonomik"]:
            self.graph_options.insert(tk.END, option)
        self.graph_options.selection_set(0, tk.END)  # T√ºm√ºn√º se√ßili yap
        
        # Ek √∂zellikler
        ttk.Label(options_frame, text="Ek √ñzellikler:").grid(row=3, column=0, sticky="w", pady=5)
        features_frame = ttk.Frame(options_frame)
        features_frame.grid(row=3, column=1, sticky="ew", pady=5)
        
        self.include_ai = tk.BooleanVar(value=True)
        ttk.Checkbutton(features_frame, text="AI Analizini Dahil Et", 
                       variable=self.include_ai).pack(side=tk.LEFT, padx=5)
        
        self.include_blockchain = tk.BooleanVar(value=False)
        ttk.Checkbutton(features_frame, text="Blockchain Verilerini Dahil Et", 
                       variable=self.include_blockchain).pack(side=tk.LEFT, padx=5)
        
        # Butonlar
        button_frame = ttk.Frame(report_window)
        button_frame.pack(fill=tk.X, padx=30, pady=20)
        
        ttk.Button(button_frame, text="ƒ∞ptal", 
                  command=report_window.destroy).pack(side=tk.RIGHT, padx=5)
        ttk.Button(button_frame, text="Raporu Olu≈ütur", 
                  command=self.create_report, style='Accent.TButton').pack(side=tk.RIGHT, padx=5)
    
    def create_report(self):
        """Rapor olu≈üturma i≈ülemini ger√ßekle≈ütirir"""
        # Burada ger√ßek rapor olu≈üturma i≈ülemleri yapƒ±lƒ±r
        # ≈ûu an i√ßin sim√ºle ediyoruz
        
        selected_graphs = [self.graph_options.get(i) for i in self.graph_options.curselection()]
        
        message = f"""
        Rapor olu≈üturma ba≈ülatƒ±ldƒ±:
        - Format: {self.report_format.get()}
        - Detay Seviyesi: {self.detail_level.get()}
        - Grafikler: {', '.join(selected_graphs)}
        - AI Analizi: {'Evet' if self.include_ai.get() else 'Hayƒ±r'}
        - Blockchain Verisi: {'Evet' if self.include_blockchain.get() else 'Hayƒ±r'}
        
        Rapor olu≈üturuldu ve 'Raporlar' klas√∂r√ºne kaydedildi.
        """
        
        messagebox.showinfo("Rapor Olu≈üturuldu", message)
    
    def open_help(self):
        """Yardƒ±m sayfasƒ±nƒ± a√ßar"""
        webbrowser.open("https://www.example.com/ultimate-banka-hack-yardim")
    
    def about(self):
        """Hakkƒ±nda penceresi"""
        about_window = tk.Toplevel(self.root)
        about_window.title("Hakkƒ±nda")
        about_window.geometry("500x450")
        
        # Ba≈ülƒ±k
        ttk.Label(about_window, 
                 text="Ultimate Banka Hack Analiz Platformu",
                 font=('Segoe UI', 16, 'bold')).pack(pady=15)
        
        # Logo
        logo_label = ttk.Label(about_window, 
                             text="üîê",
                             font=('Segoe UI', 48),
                             foreground=self.colors['primary'])
        logo_label.pack(pady=5)
        
        # Versiyon
        ttk.Label(about_window, 
                 text=f"Versiyon 3.0 | {datetime.now().strftime('%Y')}",
                 foreground=self.colors['light_text']).pack(pady=5)
        
        # A√ßƒ±klama
        desc_frame = ttk.Frame(about_window)
        desc_frame.pack(fill=tk.BOTH, expand=True, padx=30, pady=10)
        
        desc_text = """
Bu uygulama, banka hack olaylarƒ±nƒ±n finansal ve operasyonel 
etkilerini analiz etmek i√ßin geli≈ütirilmi≈ü kapsamlƒ± bir 
√ß√∂z√ºmd√ºr. Yapay zeka, blockchain analizi ve geli≈ümi≈ü 
g√∂rselle≈ütirme teknikleriyle donatƒ±lmƒ±≈ütƒ±r.

√ñzellikler:
- Ger√ßek zamanlƒ± risk deƒüerlendirme
- √áok boyutlu finansal analiz
- AI destekli tahmin motoru
- Blockchain para takip sistemi
- 3D veri g√∂rselle≈ütirme
        """
        
        ttk.Label(desc_frame, text=desc_text, justify='center').pack()
        
        # Kapatma butonu
        ttk.Button(about_window, 
                  text="Kapat", 
                  command=about_window.destroy,
                  style='Accent.TButton').pack(pady=15)

# Uygulamayƒ± ba≈ülat
if __name__ == "__main__":
    try:
        # Windows'ta DPI farkƒ±ndalƒ±ƒüƒ±
        from ctypes import windll
        windll.shcore.SetProcessDpiAwareness(1)
    except:
        pass
    
    root = tk.Tk()
    app = UltimateBankaHackAnalizTool(root)
    root.mainloop()